https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Question:
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Inorder traversal:
    Create a list and add all elements in order
        * traverse to the left till leaf node
        * after reaching leaf node, add it to the list
        * then traverse to right nodes till leaft node
    when we reach the leaf node (which means null at both side) stop the iteration
    iterate to the list, and find the min difference between adjacent values
    finally return the min difference
    
    Space: O[N]
    Time: O[N]
    */
    
    public int getMinimumDifference(TreeNode root) {
        List<Integer> output=new ArrayList<>();
        helperFunc(root,output);
        int minDiff=Integer.MAX_VALUE;
        //1,2,3
        for(int i=0;i<output.size()-1;i++){
            minDiff=Math.min(minDiff,output.get(i+1)-output.get(i));
        }
        
        return minDiff;
    }
    
    private void helperFunc(TreeNode node,List<Integer> output){
        if(node==null)
            return;
        
        helperFunc(node.left,output);
        output.add(node.val);
        helperFunc(node.right,output);
    }
}