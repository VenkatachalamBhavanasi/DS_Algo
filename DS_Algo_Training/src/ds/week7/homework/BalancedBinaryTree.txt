https://leetcode.com/problems/balanced-binary-tree/

Problem:
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //Pseudo code
    /*
    traverse through each node in the tree
    check the left and right side height
    if the difference is less than or equal to 1, then the tree is balanced
    else the tree is not balanced
    */
    
    public boolean isBalanced(TreeNode root) {
       if(root==null) return true;
        
        int left=findHeight(root.left);
        int right=findHeight(root.right);
        
        return Math.abs(left-right)<2 && isBalanced(root.left) && isBalanced(root.right);
        
    }
    
    private int findHeight(TreeNode node){
        if(node==null) return 0;
        
        return Math.max(findHeight(node.left),findHeight(node.right))+1;  
    }
}